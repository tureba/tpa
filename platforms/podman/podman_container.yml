---

# Â© Copyright EnterpriseDB UK Limited 2015-2021 - All rights reserved.

# The docker_container module accepts an intimidating number of options
# (most oriented towards lightweight container usage, rather than the
# container-as-VM model we're following here).
#
# Unfortunately, it also returns a single "docker_container" fact, which
# means we can't invoke it in a loop and process the results afterwards.
# So we loop over include_tasks and add the fact after each invocation
# to a separate list as a compromise.
#
# https://docs.ansible.com/ansible/2.8/modules/docker_container_module.html

- name: Provision podman container {{ item.Name }}
  containers.podman.podman_container:
    name: "{{ cluster_name }}_{{ item.Name }}"
    image: "{{ item.image }}"
    state: started
    privileged: "{{ item.privileged|default('no') }}"
    cap_add: "{{ item.podman_cap_add|default(omit) }}"
    cap_drop: "{{ item.podman_cap_drop|default(omit) }}"
    interactive: yes
    restart_policy: "{{ item.restart_policy|default('always') }}"
    memory: "{{ item.memory|default(omit) }}"
    memory_reservation: "{{ item.memory_reservation|default(omit) }}"
    shm_size: "{{ item.shm_size|default(omit) }}"
    env_file: "{{ item.env_file|default(omit) }}"
    env: "{{ item.env|default(omit) }}"
    label: >
      {{
        cluster_tags|combine(item.tags)|combine({
          'Cluster': cluster_name,
        })
      }}
    log_driver: "{{ item.log_driver|default(omit) }}"
    log_options: "{{ item.log_options|default(omit) }}"
    expose: "{{ item.exposed_ports|default(['22','5432','6432']) }}"
    publish: "{{ item.published_ports|default(omit) }}"
    device: "{{ item.devices|default(omit) }}"
    ip: "{{ podman_subnet | ansible.utils.ipmath(100 + item.node) }}"
    network: "{{ cluster_name }}"
    pod: "{{ cluster_name }}"
    volume: "{{ query('flattened', volumes) }}"
    sysctl: "{{ item.sysctls|default(omit) }}"
    ulimit: "{{ item.ulimits|default(omit) }}"
    tmpfs:
    security_opt: "{{ item.podman_security_opts|default(omit) }}"
  vars:
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - "{{ item.volumes|default([]) }}"
      - "{{ item.local_source_directories|default([]) }}"
  register: podman_container

- set_fact:
    podman_container_results: "{{
      podman_container_results|default([])|union([
        podman_container|combine({
          'item': item|combine({
            'private_ip': n.IPAddress or n.Networks[cluster_name]['IPAddress'],
            'ansible_host': containername
          })
        })
      ])
    }}"
  vars:
    n: "{{ podman_container.container.NetworkSettings }}"
    containername: "{{ podman_container.container.Name }}"
